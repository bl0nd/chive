#!/usr/bin/env bash
#
# chive - Simple variant switcher

PROG_NAME="chive"
VERSION="0.1.0"

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-${HOME}/.config}
CONFIG_DIR="${XDG_CONFIG_HOME}/${PROG_NAME}"

# Speed up script by not using unicode.
LC_ALL=C
LANG=C


# Print out help message and exit
usage() {
    printf '%s\n' "\
usage: chive [--version] [--help] [-e | --edit] [-l | --list] [-c | --check]
             [-a | --add <target> ...] [-t | --template <target> | <template>]
             [[<target> ...] <template>] ...

Options:

   -a, -add TARGET ...          add targets
   -t, --template TEMPLATE ...  add templates
   -e, --edit TEMPLATE ...      edit templates
   -l, --list TEMPLATE ...      list templates
   -c, --check TEMPLATE ...     check templates

   --help                       show version information of $PROG_NAME
   --version                    show this help and exit
"
    exit 1
}


# Exit with an error
die() {
    printf 'error: %s\n' "$1" 1>&2
    exit 1
}


# Colors the contents of its STDIN like so:
#
#  * Line characters: white
#  * All other characters: blue
#
# This is typically used for the `tree` command, but is also used for `ls` to
# color the filenames.
color_listing() {
    GREP_COLORS='sl=1;30:ms=01;34' grep --color '[^├─│└─]'
}


# Outputs the final component of a file path passed to its STDIN
pathname() {
    awk -F/ '{print $NF}'
}

# Does a general check on target and variant names
check_name() {
    if [[ ! "$1" =~ ^[[:alnum:]](.*) ]]; then
        die "targets and variants may only contain letters, numbers, \"_\", or \"-\""
    elif [[ ! "$1" =~ ^([[:alnum:]]+[_-]*)*$ ]]; then
        die "targets and variants must start with a letter or number"
    fi
}

# Outputs the "content" section of variants. To get the content, we:
#
#  1. Skip header (i.e., first line).
#  2. Delete leading and trailing blank lines.
v_content() {
    tail -n +2 "$1" | tac | sed '/./,$!d' | tac | sed '/./,$!d'
}


# Add target files
t_add() {
    local targets=()
    local name
    local pattern
    local new_targets=()

    # Exit if no targets are specified
    (( "$#" == 0 )) && die "no targets specified"

    # Read arguments into array
    IFS=' ' read -r -a targets <<< "$@"

    # Add targets
    for name in "${targets[@]}"; do
        # Check names to see if they're valid target names
        check_name "$name"
        if grep -m 1 -q ^"$name"$ <<< "$ALL_VARIANTS"; then
            die "\"$name\" is an existing variant"
        fi

        # Create target directory if it doesn't exist and add the target to the
        # list of new targets
        [[ ! -d "$CONFIG_DIR/$name" ]] && {
            mkdir -p "$CONFIG_DIR/$name"
            new_targets+=("$name")
        }
    done

    # Show all targets
    if (( "${#new_targets}" == 0 )); then
        # no new targets were added, so just list all targets in the same color
        # TODO: List specified targets in yellow or something
        (cd "$CONFIG_DIR" && ls -1 -d -- */ | sed 's/.$//' | color_listing)
    else
        # new targets were found, so highlight the new targets
        pattern="$(sed 's/ /|/g' <<< "${new_targets[@]}" | xargs printf '^(%s)$')"
        (cd "$CONFIG_DIR" && ls -1 | GREP_COLORS='cx=01;34' grep --color -E "$pattern" -A100 -B100)
    fi
}

# Set variants for specific targets
v_setsome() {
    for template in "${templates[@]}"; do
        for target in "${targets[@]}"; do
            path="${CONFIG_DIR}/${target}/${template}"

            # skip targets that don't have the template or have empty ones
            [[ ! -f "$path" || ! -s "$path" ]] && continue

            # TODO
        done
    done
}

# Set a variant for all targets
v_setall() {
    local config_og content_og config content match linenr offset endnr

    if (( "$#" != 1 )); then
        printf '%s\n' 'error: multiple templates cannot be applied to all targets' 1>&2
        exit 1
    fi

    for template in "${templates[@]}"; do
        for target in ${ALL_TARGETS[*]}; do
            path="${CONFIG_DIR}/${target}/${template}"
            match=0

            # skip targets that don't have the template or have empty ones
            [[ ! -f "$path" || ! -s "$path" ]] && continue

            # get config path
            config_og="$(head -n 1 "$path")"

            if [[ ! -f "$config_og" ]]; then
                printf 'error: file "%s" does not exist\n' "$config_og" >&2
                exit 1
            fi

            # get variant content
            content_og="$(v_content "$path")"

            if pcregrep -M -q "^${content_og}$" "$config_og"; then
                # the template is already being used
                continue
            else
                # the variant is not currently being used, so check if
                # another variant is in use. If so, we can replace it.
                # If not, then we can't switch to this variant.
                for variant in "${CONFIG_DIR}"/"${target}"/*; do
                    [[ ! -s "$variant" ]] && continue;

                    # get other variant config
                    config="$(head -n 1 "$variant")"

                    if [[ -f "$config" ]]; then
                        # get other variant content
                        content="$(v_content "$variant")"

                        # check if other variant gets a match
                        if pcregrep -M -q "^${content}$" "$config"; then
                            match=1
                            break
                        fi
                    fi
                done

                if [[ "$match" -eq 1 ]]; then
                    # another variant matched, which means we can switch
                    linenr="$(pcregrep -M -n "^${content}$" "$config" | head -n 1 | cut -d: -f1)"
                    offset="$(wc -l <<< "$content")"
                    endnr=$((linenr + offset - 1))

                    sed -i "${linenr},${endnr}d" "$config_og"
                    awk -i inplace -v a="$linenr" -v b="$content_og" "NR==a{print b}1" "$config_og"
                else
                    printf '%s\n' "error: invalid \"$target\" variant: \"$template\"" 1>&2
                fi
            fi
        done
    done
}

v_set() {
    local targets=()
    local templates=()
    local template path

    # classify names as either targets or templates
    for name in "${@}"; do
        if grep -m 1 -q ^"$name"$ <<< "$ALL_TARGETS"; then
            targets+=("$name")
        else
            templates+=("$name")
        fi
    done

    if (( "${#targets}" == 0 )); then
        v_setall "$@"
    else
        v_setsome
    fi
}

v_add() {
    local targets=()
    local templates=()
    local args arr

    (( "$#" == 1 )) && {
        printf '%s\n' "error: no templates specified" 1>&2
        exit 1
    }

    IFS=' ' read -r -a args <<< "$*"

    for arg in "${args[@]}"; do
        if [[ ! $arg =~ ^[[:alnum:]](.*) ]]; then
            printf '%s\n' "error: template \"$arg\" does not start with a letter/number" 1>&2
            exit 1
        elif [[ ! $arg =~ ^([[:alnum:]]+[_-]*)*$ ]]; then
            printf '%s\n' "error: template \"$arg\" does not contain only letters, numbers, \"_\", or \"-\"" 1>&2
            exit 1
        elif grep -m 1 -q ^"$arg"$ <<< "$ALL_TARGETS"; then
            targets+=("$arg")
        else
            templates+=("$arg")
        fi
    done

    # if no targets are specified, create templates for all targets
    if [[ "${#targets}" -eq 0 ]]; then
        arr=($ALL_TARGETS)
        v_create "${arr[@]}"
    else
        v_create "${targets[@]}"
    fi
}

v_create() {
    local ref custom_template path

    ref=("$@")

    if ! test -t 0; then
        custom_template=$(</dev/stdin)
    fi

    for target in "${ref[@]}"; do
        for template in "${templates[@]}"; do
            path="${CONFIG_DIR}/${target}/${template}"

            if test -t 0; then
                # if nothing is going to our stdin, create empty templates
                touch "$path"
            elif [[ ! -f "$path" ]]; then
                # use stdin as content for templates
                printf '%s\n' "$custom_template" > "$path"
            fi
        done
    done
}

# Zero or more arguments were given but no options were specified, so either:
#
#  1. List templates of all/some targets.
#  2. Set templates for all/some targets.
#
# The decision process is like so:
#
#  * If no arguments are given, assume the user wants to see the templates for
#    all targets.
#
#  * If existing targets are specified, assume the user wants to see the
#    templates for those targets.
#
#  * If an existing template is specified, assume the user wants to set that
#    template for all targets.
#
#  * If existing templates and targets are specified, assume the user wants to
#    set some templates for some targets, and other templates for other targets.
v_start() {
    local name
    local t_failed
    local v_failed
    local error

    if (( "$#" == 0 )); then
        # nothing was given, so print all the things
        (cd "$CONFIG_DIR" && tree -L 1 --charset=utf-8 --noreport -- * | color_listing)
    else
        for name in "${@}"; do
            check_name "$name"
        done

        # see if any of the names are not targets
        t_failed="$(cd "$CONFIG_DIR" && file "$@" | grep "cannot open" | cut -d: -f1)"

        if [[ -z "$t_failed" ]]; then
            # only targets were specified, so list their templates
            (cd "$CONFIG_DIR" && tree -L 1 --charset=utf-8 --noreport -- "$@" | color_listing)
        else
            # some names aren't targets, so check and see if they're templates.
            # if they are, set the templates
            read -a t_failed <<< "$(tr '\n' ' ' <<< "$t_failed" | sed 's/[ ]*$//')"
            v_failed=()

            for target in "${t_failed[@]}"; do
                if [[ "$(find "$CONFIG_DIR"/* -name "$target" | wc -l)" == 0 ]]; then
                    printf 'error: unknown target %s\n' "$target" 1>&2
                    exit 1
                fi
            done

            v_set "$@"
        fi
    fi
}

main() {
    if [[ ! -d "$CONFIG_DIR" ]]; then
        # create configuration directory if it doesn't exist
        mkdir -p "$CONFIG_DIR"
    else
        # get all variant and target names if configuration directory exists
        ALL_VARIANTS="$(find "$CONFIG_DIR" -maxdepth 2 -mindepth 2 ! -path "${CONFIG_DIR}/.git" | pathname)"
        ALL_TARGETS="$(find "$CONFIG_DIR" -maxdepth 1 -type d ! -path "$CONFIG_DIR" ! -path "${CONFIG_DIR}/.git" | pathname)"
    fi

    # process command-line options/arguments
    while [[ "$1" ]]; do
        case $1 in
            "--version")
                printf '%s\n' "$PROG_NAME $VERSION"
                exit
            ;;
            "--help") usage ;;
            "--add" | "-a")
                shift
                t_add "$@"
                exit
            ;;
            "--template" | "-t")
                shift
                v_add "$@"
                exit
            ;;
            "--edit" | "-e")
                EDIT=1
            ;;
            "--check" | "-c")
                shift
                v_check "$@"
                exit
            ;;
            "--list" | "-l")
                shift
                v_list "$@"
                exit
            ;;
            *)
                break
            ;;
        esac

        shift
    done

    v_start "$@"
}

main "$@"
