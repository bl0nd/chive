#!/usr/bin/env bash

PROG_NAME="chive"
VERSION="0.1.0"

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-${HOME}/.config}
CONFIG_DIR="${XDG_CONFIG_HOME}/${PROG_NAME}"

# Speed up script by not using unicode.
LC_ALL=C
LANG=C

[[ -d "$CONFIG_DIR" ]] && {
    TEMPLATES="$(find "$CONFIG_DIR" -maxdepth 2 -mindepth 2 ! -path "${CONFIG_DIR}/.git" | awk -F/ '{print $NF}')"
    ALL_TARGETS="$(find "$CONFIG_DIR" -maxdepth 1 -type d ! -path "$CONFIG_DIR" ! -path "${CONFIG_DIR}/.git" | awk -F/ '{print $NF}')"
}

usage() {
    printf "%s\n" "\
usage: chive [--version] [--help] [--edit|-e] [--list|-l ] [--check|-c]
             [--add|-a TARGET ...] [--template|-t TARGET|TEMPLATE]
             [[TARGET ...] TEMPLATE] ...

Options:

   -a, -add TARGET ...          add targets
   -t, --template TEMPLATE ...  add templates
   -e, --edit TEMPLATE ...      edit templates
   -l, --list TEMPLATE ...      list templates
   -c, --check TEMPLATE ...     check templates

   --help                       show version information of $PROG_NAME
   --version                    show this help and exit
"
    exit 1
}

color_tree() {
    GREP_COLORS='sl=1;30:ms=01;34' grep --color '[^├─│└─]'
}

nltospace() {
    tr '\n' ' ' <<< "$1"
}

get_content() {
    # skip header     delete blank line content     delete leading/trailing blank lines
    tail -n +2 "$1" | sed 's/^[[:space:]]*$//' | sed -e :a -e '/./,$!d;/^\n*$/{$d;N;};/\n$/ba'
}

add_targets() {
    local targets new_targets pattern

    (( "$#" == 1 )) && {
        printf '%s\n' "error: no targets specified" 1>&2
        exit 1
    }

    shift
    IFS=' ' read -r -a targets <<< $*
    new_targets=()

    for target in "${targets[@]}"; do
        if [[ ! $target =~ ^[[:alnum:]](.*) ]]; then
            printf '%s\n' "error: target \"$target\" does not start with a letter/number." 1>&2
            exit 1
        elif [[ ! $target =~ ^([[:alnum:]]+[_-]*)*$ ]]; then
            printf '%s\n' "error: target \"$target\" does not contain only letters, numbers, \"_\", or \"-\"." 1>&2
            exit 1
        elif grep -m 1 -q ^"$target"$ <<< "$TEMPLATES"; then
            printf '%s\n' "error: \"${target}\" is a template name." 1>&2
            exit 1
        fi

        [[ ! -d "${CONFIG_DIR}"/"${target}" ]] && {
            mkdir -p "${CONFIG_DIR}/${target}"
            new_targets+=("$target")
        }
    done

    if (( "${#new_targets}" == 0 )); then
        (cd "$CONFIG_DIR" && ls -1 -d -- */ | sed 's/.$//' | color_tree)
    else
        pattern="$(sed 's/ /|/g' <<< "${new_targets[@]}" | xargs printf '^(%s)$')"
        (cd "$CONFIG_DIR" && ls -1 | GREP_COLORS='cx=01;34' grep --color -E "$pattern" -A100 -B100)
    fi
}

# This is the start of the main program:
#
#  * If there is an existing template specified, then we assume we want to set
#    templates.
#
#  * If there is an non-existing template specified, then we error out assuming
#    the user wanted to see templates of a particular target.
#
#  * If there is only targets, show templates for them.
#
#  * If there is nothing, show all templates.
go() {
    local target failed_targets failed_templates error

    if (( "$#" == 0 )); then
        # nothing was given, so print all the things
        (cd "$CONFIG_DIR" && tree -L 1 --charset=utf-8 --noreport -- * | color_tree)
    else
        # check the arguments passed
        for target in "${@}"; do
            if [[ ! $target =~ ^[[:alnum:]](.*) ]]; then
                printf '%s\n' "error: target \"$target\" does not start with a letter/number." 1>&2
                exit 1
            elif [[ ! $target =~ ^([[:alnum:]]+[_-]*)*$ ]]; then
                printf '%s\n' "error: target \"$target\" does not contain only letters, numbers, \"_\", or \"-\"." 1>&2
                exit 1
            fi
        done

        # see if any of the names are not targets
        failed_targets="$(cd "$CONFIG_DIR" && file "$@" | grep "cannot open" | cut -d: -f1)"

        if [[ -z "$failed_targets" ]]; then
            # only targets were specified, so list their templates
            (cd "$CONFIG_DIR" && tree -L 1 --charset=utf-8 --noreport -- "$@" | color_tree)
        else
            # some names aren't targets, so check and see if they're templates.
            # if they are, set the templates
            read -a failed_targets <<< "$(nltospace "$failed_targets" | sed 's/[ ]*$//')"
            failed_templates=()

            for target in "${failed_targets[@]}"; do
                if [[ "$(find "$CONFIG_DIR"/* -name "$target" | wc -l)" == 0 ]]; then
                    printf 'error: unknown target %s.\n' "$target" 1>&2
                    exit 1
                fi
            done

            set_templates "$@"
        fi
    fi
}

set_n_templates() {
    for template in "${templates[@]}"; do
        for target in "${targets[@]}"; do
            path="${CONFIG_DIR}/${target}/${template}"

            # skip targets that don't have the template or have empty ones
            [[ ! -f "$path" || ! -s "$path" ]] && continue

            # TODO
        done
    done
}

set_all_templates() {
    local config_og content_og config content match linenr offset endnr

    if (( "$#" != 1 )); then
        printf '%s\n' 'error: multiple templates cannot be applied to all targets.' 1>&2
        exit 1
    fi

    for template in "${templates[@]}"; do
        for target in ${ALL_TARGETS[*]}; do
            path="${CONFIG_DIR}/${target}/${template}"

            # skip targets that don't have the template or have empty ones
            [[ ! -f "$path" || ! -s "$path" ]] && continue

            # get config path
            config_og="$(head -n 1 "$path")"

            if [[ ! -f "$config_og" ]]; then
                printf 'error: file "%s" does not exist\n' "$config_og" >&2
                exit 1
            fi

            # get variant content
            content_og="$(get_content "$path")"

            if pcregrep -M -q "^${content_og}$" "$config_og"; then
                # the template is already being used
                continue
            else
                # the variant is not currently being used, so check if
                # another variant is in use. If so, we can replace it.
                # If not, then we can't switch to this variant.
                for variant in "${CONFIG_DIR}"/"${target}"/*; do
                    [[ ! -s "$variant" ]] && continue;

                    # get other variant config
                    config="$(head -n 1 "$variant")"

                    if [[ -f "$config" ]]; then
                        # get other variant content
                        content="$(get_content "$variant")"

                        # check if other variant gets a match
                        if pcregrep -M -q "^${content}$" "$config"; then
                            match=1
                            break
                        fi
                    fi
                done

                if [[ "$match" -eq 1 ]]; then
                    # another variant matched, which means we can switch
                    linenr="$(pcregrep -M -n "^${content}$" "$config" | head -n 1 | cut -d: -f1)"
                    offset="$(wc -l <<< "$content")"
                    endnr=$((linenr + offset - 1))

                    sed -i "${linenr},${endnr}d" "$config_og"
                    awk -i inplace -v a="$linenr" -v b="$content_og" "NR==a{print b}1" "$config_og"
                else
                    printf '%s\n' "error: invalid variant \"$template\" for target \"$target\"" 1>&2
                    exit 1
                fi
            fi
        done
    done
}

set_templates() {
    local targets=()
    local templates=()
    local template path

    # classify names as either targets or templates
    for name in "${@}"; do
        if grep -m 1 -q ^"$name"$ <<< "$ALL_TARGETS"; then
            targets+=("$name")
        else
            templates+=("$name")
        fi
    done

    if (( "${#targets}" == 0 )); then
        set_all_templates "$@"
    else
        set_n_templates
    fi

    #printf '%s\n' "Switched to."
}

add_templates() {
    local targets=()
    local templates=()
    local args arr

    (( "$#" == 1 )) && {
        printf '%s\n' "error: no templates specified" 1>&2
        exit 1
    }

    shift
    IFS=' ' read -r -a args <<< "$*"

    for arg in "${args[@]}"; do
        if [[ ! $arg =~ ^[[:alnum:]](.*) ]]; then
            printf '%s\n' "error: template \"$arg\" does not start with a letter/number." 1>&2
            exit 1
        elif [[ ! $arg =~ ^([[:alnum:]]+[_-]*)*$ ]]; then
            printf '%s\n' "error: template \"$arg\" does not contain only letters, numbers, \"_\", or \"-\"." 1>&2
            exit 1
        elif grep -m 1 -q ^"$arg"$ <<< "$ALL_TARGETS"; then
            targets+=("$arg")
        else
            templates+=("$arg")
        fi
    done

    # if no targets are specified, create templates for all targets
    if [[ "${#targets}" -eq 0 ]]; then
        arr=($ALL_TARGETS)
        create_templates "${arr[@]}"
    else
        create_templates "${targets[@]}"
    fi
}

create_templates() {
    local ref custom_template path

    ref=("$@")

    if ! test -t 0; then
        custom_template=$(</dev/stdin)
    fi

    for target in "${ref[@]}"; do
        for template in "${templates[@]}"; do
            path="${CONFIG_DIR}/${target}/${template}"

            if test -t 0; then
                # if nothing is going to our stdin, create empty templates
                touch "$path"
            elif [[ ! -f "$path" ]]; then
                # use stdin as content for templates
                printf '%s\n' "$custom_template" > "$path"
            fi
        done
    done
}

main() {
    [[ ! -d "$CONFIG_DIR" ]] && {
        mkdir -p "${XDG_CONFIG_HOME}/${PROG_NAME}"
    }

    while [[ "$1" ]]; do
        case $1 in
            "--version")
                printf '%s\n' "$PROG_NAME $VERSION"
                exit 1
            ;;
            "--help") usage ;;

            "--add" | "-a")
                add_targets "$@"
                exit
            ;;

            "--template" | "-t")
                add_templates "$@"
                exit
            ;;

            "--edit" | "-e")
                EDIT=1
            ;;

            "--check" | "-c")
                check_templates "$@"
                exit
            ;;

            "--list" | "-l")
                list_templates "$@"
                exit
            ;;

            *)
                break
            ;;
        esac

        shift
    done

    go "$@"
}

main "$@"
