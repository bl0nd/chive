#!/usr/bin/env bash

PROG_NAME="chive"
VERSION="0.1.0"

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-${HOME}/.config}
CONFIG_DIR="${XDG_CONFIG_HOME}/${PROG_NAME}"

# Speed up script by not using unicode.
LC_ALL=C
LANG=C

[[ -d "$CONFIG_DIR" ]] && {
    TEMPLATES="$(find "$CONFIG_DIR" -maxdepth 2 -mindepth 2 ! -path "${CONFIG_DIR}/.git" | awk -F/ '{print $NF}')"
}

usage() {
    printf "%s\n" "\
usage: chive [--version] [--help] [--edit|-e] [--list|-l ] [--check|-c]
             [--add|-a TARGET ...] [--template|-t TARGET|TEMPLATE]
             [[TARGET ...] TEMPLATE] ...

Options:

   -a, -add TARGET ...          add targets
   -t, --template TEMPLATE ...  add templates
   -e, --edit TEMPLATE ...      edit templates
   -l, --list TEMPLATE ...      list templates
   -c, --check TEMPLATE ...     check templates

   --help                       show version information of $PROG_NAME
   --version                    show this help and exit
"
    exit 1
}

color_tree() {
    GREP_COLORS='sl=1;30:ms=01;34' grep --color '[^├─│└─]'
}

nltospace() {
    tr '\n' ' ' <<< "$1"
}

add_targets() {
    local targets
    local new_targets
    local pattern

    (( "$#" == 1 )) && {
        printf '%s\n' "error: no targets specified" 1>&2
        exit 1
    }

    shift
    IFS=' ' read -r -a targets <<< $*
    new_targets=()

    for target in "${targets[@]}"; do
        if [[ ! $target =~ ^[[:alnum:]](.*) ]]; then
            printf '%s\n' "error: target \"$target\" does not start with a letter/number." 1>&2
            exit 1
        elif [[ ! $target =~ ^([[:alnum:]]+[_-]*)*$ ]]; then
            printf '%s\n' "error: target \"$target\" does not contain only letters, numbers, \"_\", or \"-\"." 1>&2
            exit 1
        elif grep -m 1 -q ^"$target"$ <<< "$TEMPLATES"; then
            printf '%s\n' "error: \"${target}\" is a template name." 1>&2
            exit 1
        fi

        [[ ! -d "${CONFIG_DIR}"/"${target}" ]] && {
            mkdir -p "${CONFIG_DIR}/${target}"
            new_targets+=("$target")
        }
    done

    if (( "${#new_targets}" == 0 )); then
        (cd "$CONFIG_DIR" && ls -1 -d -- */ | sed 's/.$//' | color_tree)
    else
        pattern="$(sed 's/ /|/g' <<< "${new_targets[@]}" | xargs printf '^(%s)$')"
        (cd "$CONFIG_DIR" && ls -1 | GREP_COLORS='cx=01;34' grep --color -E "$pattern" -A100 -B100)
    fi
}

# This is the start of the main program:
#
#  * If there is an existing template specified, then we assume we want to set
#    templates.
#
#  * If there is an non-existing template specified, then we error out assuming
#    the user wanted to see templates of a particular target.
#
#  * If there is only targets, show templates for them.
#
#  * If there is nothing, show all templates.
go() {
    local failed_targets
    local failed_templates
    local error

    if (( "$#" == 0 )); then
        (cd "$CONFIG_DIR" && tree -L 1 --charset=utf-8 --noreport -- * | color_tree)
    else
        for target in "${@}"; do
            if [[ ! $target =~ ^[[:alnum:]](.*) ]]; then
                printf '%s\n' "error: target \"$target\" does not start with a letter/number." 1>&2
                exit 1
            elif [[ ! $target =~ ^([[:alnum:]]+[_-]*)*$ ]]; then
                printf '%s\n' "error: target \"$target\" does not contain only letters, numbers, \"_\", or \"-\"." 1>&2
                exit 1
            fi
        done

        failed_targets="$(cd "$CONFIG_DIR" && file "$@" | grep "cannot open" | cut -d: -f1)"

        if [[ -z "$failed_targets" ]]; then
            # only targets were specified, so list their templates
            (cd "$CONFIG_DIR" && tree -L 1 --charset=utf-8 --noreport -- "$@" | color_tree)
        else
            # some names failed, so check and see if they're template names
            failed_targets="$(nltospace "${failed_targets}" | sed 's/[ ]*$//')"
            failed_templates="$(cd "$CONFIG_DIR" && file -- */${failed_targets[*]} | grep "cannot open" | cut -d: -f1)"

            if [[ -n "$failed_templates" ]]; then
                # the names were not targets or templates so abort
                error="$(nltospace "$failed_templates" | sed 's/[ ]*$//' | xargs printf '"%s", ' | sed 's/\*\///')"
                printf 'error: unknown targets %s.\n' "${error%, }" 1>&2
                exit 1
            fi

            # there was a template name, so set target templates accordingly
        fi
    fi
}

add_templates() {
    local all_templates
    local all_targets
    local targets
    local templates
    local arr

    (( "$#" == 1 )) && {
        printf '%s\n' "error: no templates specified" 1>&2
        exit 1
    }

    shift
    IFS=' ' read -r -a all_templates <<< "$*"

    all_targets="$(find "$CONFIG_DIR" -maxdepth 1 -type d ! -path "$CONFIG_DIR" ! -path "${CONFIG_DIR}/.git" | awk -F/ '{print $NF}')"
    targets=()

    for template in "${all_templates[@]}"; do
        if [[ ! $template =~ ^[[:alnum:]](.*) ]]; then
            printf '%s\n' "error: template \"$template\" does not start with a letter/number." 1>&2
            exit 1
        elif [[ ! $template =~ ^([[:alnum:]]+[_-]*)*$ ]]; then
            printf '%s\n' "error: template \"$template\" does not contain only letters, numbers, \"_\", or \"-\"." 1>&2
            exit 1
        elif grep -m 1 -q ^"$template"$ <<< "$all_targets"; then
            targets+=("$template")
        else
            templates+=("$template")
        fi
    done

    # if no targets are specified, create templates for all targets
    if [[ "${#targets}" -eq 0 ]]; then
        arr=($all_targets)
        create_templates "${arr[@]}"
    else
        create_templates "${targets[@]}"
    fi
}

create_templates() {
    local ref
    local custom_template
    local path

    ref=("$@")

    if ! test -t 0; then
        custom_template=$(</dev/stdin)
    fi

    for target in "${ref[@]}"; do
        for template in "${templates[@]}"; do
            path="${CONFIG_DIR}/${target}/${template}"

            if test -t 0; then
                # if nothing is going to our stdin, create empty templates
                touch "$path"
            elif [[ ! -f "$path" ]]; then
                # use stdin as content for templates
                printf '%s\n' "$custom_template" > "$path"
            fi
        done
    done
}

main() {
    [[ ! -d "$CONFIG_DIR" ]] && {
        mkdir -p "${XDG_CONFIG_HOME}/${PROG_NAME}"
    }

    while [[ "$1" ]]; do
        case $1 in
            "--version")
                printf '%s\n' "$PROG_NAME $VERSION"
                exit 1
            ;;
            "--help") usage ;;

            "--add" | "-a")
                add_targets "$@"
                exit
            ;;

            "--template" | "-t")
                add_templates "$@"
                exit
            ;;

            "--edit" | "-e")
                EDIT=1
            ;;

            "--check" | "-c")
                check_templates "$@"
                exit
            ;;

            "--list" | "-l")
                list_templates "$@"
                exit
            ;;

            *)
                break
            ;;
        esac

        shift
    done

    go "$@"
}

main "$@"
